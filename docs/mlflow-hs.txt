-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/augustunderground/mlflow-hs#readme</a>
@package mlflow-hs
@version 0.1.0.0


-- | MLFlow Bindings
module MLFlow.DataStructures

-- | Tags
data Tag
Tag :: String -> String -> Tag

-- | The tag key.
[tagKey] :: Tag -> String

-- | The tag value.
[tagValue] :: Tag -> String

-- | Current Life Cycle Stage of the Experiment
data LifeCycleStage
Active :: LifeCycleStage
Deleted :: LifeCycleStage

-- | Tag for an experiment.
type ExperimentTag = Tag

-- | Experiment
data Experiment
Experiment :: String -> String -> FilePath -> LifeCycleStage -> Maybe Int -> Maybe Int -> Maybe [ExperimentTag] -> Experiment

-- | Unique identifier for the experiment.
[experimentId] :: Experiment -> String

-- | Human readable name that identifies the experiment.
[experimentName] :: Experiment -> String

-- | Location where artifacts for the experiment are stored.
[artifactLocation] :: Experiment -> FilePath

-- | Current life cycle stage of the experiment: “active” or “deleted”.
--   Deleted experiments are not returned by APIs.
[lifecycleStage] :: Experiment -> LifeCycleStage

-- | Last update time
[lastUpdateTime] :: Experiment -> Maybe Int

-- | Creation time
[creationTime] :: Experiment -> Maybe Int

-- | Tags: Additional metadata key-value pairs.
[experimentTags] :: Experiment -> Maybe [ExperimentTag]

-- | Metadata of a single artifact file or directory.
data FileInfo
FileInfo :: FilePath -> Bool -> Int -> FileInfo

-- | Path relative to the root artifact directory run.
[path] :: FileInfo -> FilePath

-- | Whether the path is a directory.
[isDir] :: FileInfo -> Bool

-- | Size in bytes. Unset for directories.
[fileSize] :: FileInfo -> Int

-- | Metric associated with a run, represented as a key-value pair.
data Metric
Metric :: String -> Float -> Int -> Maybe Int -> Metric

-- | Key identifying this metric.
[metricKey] :: Metric -> String

-- | Value associated with this metric.
[metricValue] :: Metric -> Float

-- | The timestamp at which this metric was recorded.
[metricTimeStamp] :: Metric -> Int

-- | Step at which to log the metric.
[metricStep] :: Metric -> Maybe Int
data MetricLogger
MetricLogger :: String -> String -> Float -> Int -> Maybe Int -> MetricLogger

-- | ID of the run under which to log the metric. Must be provided.
[metricLoggerRunId] :: MetricLogger -> String

-- | Name of the metric. This field is required.
[metricLoggerKey] :: MetricLogger -> String

-- | Double value of the metric being logged. This field is required.
[metricLoggerValue] :: MetricLogger -> Float

-- | Unix timestamp in milliseconds at the time metric was logged. This
--   field is required.
[metricLoggerTimeStamp] :: MetricLogger -> Int

-- | Step at which to log the metric.
[metricLoggerStep] :: MetricLogger -> Maybe Int

-- | Batch Logging
data MetricBatchLogger
MetricBatchLogger :: String -> [Metric] -> [Param] -> Maybe [Tag] -> MetricBatchLogger

-- | ID of the run to log under
[mblRunId] :: MetricBatchLogger -> String

-- | Metrics to log. A single request can contain up to 1000 metrics, and
--   up to 1000 metrics, params, and tags in total.
[mblMetrics] :: MetricBatchLogger -> [Metric]

-- | Params to log. A single request can contain up to 100 params, and up
--   to 1000 metrics, params, and tags in total.
[mblParams] :: MetricBatchLogger -> [Param]

-- | Tags to log. A single request can contain up to 100 tags, and up to
--   1000 metrics, params, and tags in total.
[mblTags] :: MetricBatchLogger -> Maybe [Tag]

-- | Tag for a model version.
type ModelVersionTag = Tag

-- | Status of a Model
data ModelVersionStatus

-- | Request to register a new model version is pending as server performs
--   background tasks.
PendingRegistration :: ModelVersionStatus

-- | Request to register a new model version has failed.
FailedRegistration :: ModelVersionStatus

-- | Model version is ready for use.
Ready :: ModelVersionStatus

-- | Model Version
data ModelVersion
ModelVersion :: String -> String -> Int -> Int -> String -> String -> String -> String -> String -> ModelVersionStatus -> String -> Maybe [ModelVersionTag] -> String -> ModelVersion

-- | Unique name of the model
[modelName] :: ModelVersion -> String

-- | Model’s version number.
[modelVersion] :: ModelVersion -> String

-- | Timestamp recorded when this model_version was created.
[creationTimeStamp] :: ModelVersion -> Int

-- | Timestamp recorded when metadata for this model_version was last
--   updated.
[lastUpdatedTimeStamp] :: ModelVersion -> Int

-- | User that created this model_version.
[modelUserId] :: ModelVersion -> String

-- | Current stage for this model_version.
[currentStage] :: ModelVersion -> String

-- | Description of this model_version.
[modelDescription] :: ModelVersion -> String

-- | URI indicating the location of the source model artifacts, used when
--   creating model_version
[modelSource] :: ModelVersion -> String

-- | MLflow run ID used when creating model_version, if source was
--   generated by an experiment run stored in MLflow tracking server.
[modelRunId] :: ModelVersion -> String

-- | Current status of model_version
[modelStatus] :: ModelVersion -> ModelVersionStatus

-- | Details on current status, if it is pending or failed.
[modelStatusMessage] :: ModelVersion -> String

-- | Tags: Additional metadata key-value pairs for this model_version.
[modelTags] :: ModelVersion -> Maybe [ModelVersionTag]

-- | Run Link: Direct link to the run that generated this version.
[modelRunLink] :: ModelVersion -> String

-- | Param associated with a run.
data Param
Param :: String -> String -> Param

-- | Key identifying this param.
[paramKey] :: Param -> String

-- | Value associated with this param.
[paramValue] :: Param -> String

-- | Tag for a registered model
type RegisteredModelTag = Tag
data RegisteredModel
RegisteredModel :: String -> Int -> Int -> String -> String -> [ModelVersion] -> Maybe [RegisteredModelTag] -> RegisteredModel

-- | Unique name for the model.
[regName] :: RegisteredModel -> String

-- | Timestamp recorded when this registered_model was created.
[regCreationTimeStamp] :: RegisteredModel -> Int

-- | Timestamp recorded when metadata for this registered_model was last
--   updated.
[regLastUpdatedTimeStamp] :: RegisteredModel -> Int

-- | User that created this registered_model
[regUserId] :: RegisteredModel -> String

-- | Description of this registered_model.
[regDescription] :: RegisteredModel -> String

-- | Collection of latest model versions for each stage. Only contains
--   models with current READY status.
[latestVersions] :: RegisteredModel -> [ModelVersion]

-- | Tags: Additional metadata key-value pairs for this registered_model.
[regTags] :: RegisteredModel -> Maybe [RegisteredModelTag]

-- | Tag for a run.
type RunTag = Tag

-- | Status of a run.
data RunStatus

-- | Run has been initiated.
Running :: RunStatus

-- | Run is scheduled to run at a later time.
Scheduled :: RunStatus

-- | Run has completed.
Finished :: RunStatus

-- | Run execution failed.
Failed :: RunStatus

-- | Run killed by user.
Killed :: RunStatus

-- | Run data (metrics, params, and tags).
data RunData
RunData :: Maybe [Metric] -> Maybe [Param] -> Maybe [RunTag] -> RunData

-- | Run metrics.
[runMetrics] :: RunData -> Maybe [Metric]

-- | Run parameters.
[runParams] :: RunData -> Maybe [Param]

-- | Additional metadata key-value pairs.
[runTags] :: RunData -> Maybe [RunTag]

-- | Metadata of a single run.
data RunInfo
RunInfo :: String -> String -> RunStatus -> Int -> Maybe Int -> String -> LifeCycleStage -> RunInfo

-- | Unique identifier for the run.
[runId] :: RunInfo -> String

-- | The experiment ID.
[runExperimentId] :: RunInfo -> String

-- | Current status of the run.
[runStatus] :: RunInfo -> RunStatus

-- | Unix timestamp of when the run started in milliseconds.
[runStartTime] :: RunInfo -> Int

-- | Unix timestamp of when the run ended in milliseconds.
[runEndTime] :: RunInfo -> Maybe Int

-- | URI of the directory where artifacts should be uploaded. This can be a
--   local path (starting with “/”), or a distributed file system (DFS)
--   path, like s3:/<i>bucket</i>directory or dbfs:<i>my</i>directory. If
--   not set, the local ./mlruns directory is chosen.
[runArtifactUri] :: RunInfo -> String

-- | Current life cycle stage of the experiment : OneOf(“active”,
--   “deleted”)
[runLifeCycleStage] :: RunInfo -> LifeCycleStage

-- | A single run.
data Run
Run :: RunInfo -> RunData -> Run

-- | Run metadata.
[runInfo] :: Run -> RunInfo

-- | Run data.
[runData] :: Run -> RunData

-- | Request Structure for Creating Runs
data RunCreator
RunCreator :: String -> Int -> Maybe [RunTag] -> RunCreator

-- | ID of the associated experiment.
[runExpId'] :: RunCreator -> String

-- | Unix timestamp in milliseconds of when the run started.
[runStartTime'] :: RunCreator -> Int

-- | Additional metadata for run.
[runTags'] :: RunCreator -> Maybe [RunTag]

-- | Request Structure for Updating Run metadata.
data RunUpdater
RunUpdater :: String -> RunStatus -> Maybe Int -> RunUpdater

-- | ID of the run to update. Must be provided.
[uRunId] :: RunUpdater -> String

-- | Updated status of the run.
[uStatus] :: RunUpdater -> RunStatus

-- | Unix timestamp in milliseconds of when the run ended.
[uEndTime] :: RunUpdater -> Maybe Int

-- | View type for ListExperiments query.
data ViewType

-- | Default. Return only active experiments.
ActiveOnly :: ViewType

-- | Return only deleted experiments.
DeletedOnly :: ViewType

-- | Get all experiments.
All :: ViewType
instance GHC.Show.Show MLFlow.DataStructures.Tag
instance GHC.Show.Show MLFlow.DataStructures.Experiment
instance GHC.Generics.Generic MLFlow.DataStructures.Experiment
instance GHC.Show.Show MLFlow.DataStructures.FileInfo
instance GHC.Show.Show MLFlow.DataStructures.Metric
instance GHC.Show.Show MLFlow.DataStructures.MetricLogger
instance GHC.Show.Show MLFlow.DataStructures.ModelVersion
instance GHC.Show.Show MLFlow.DataStructures.Param
instance GHC.Show.Show MLFlow.DataStructures.MetricBatchLogger
instance GHC.Show.Show MLFlow.DataStructures.RegisteredModel
instance GHC.Classes.Eq MLFlow.DataStructures.RunStatus
instance GHC.Show.Show MLFlow.DataStructures.RunData
instance GHC.Show.Show MLFlow.DataStructures.RunInfo
instance GHC.Show.Show MLFlow.DataStructures.Run
instance GHC.Show.Show MLFlow.DataStructures.RunCreator
instance GHC.Show.Show MLFlow.DataStructures.RunUpdater
instance GHC.Show.Show MLFlow.DataStructures.ViewType
instance GHC.Read.Read MLFlow.DataStructures.ViewType
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.RunUpdater
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.RunUpdater
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.RunCreator
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.RunCreator
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.Run
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.Run
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.RunInfo
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.RunInfo
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.RunData
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.RunData
instance GHC.Show.Show MLFlow.DataStructures.RunStatus
instance GHC.Read.Read MLFlow.DataStructures.RunStatus
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.RegisteredModel
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.RegisteredModel
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.MetricBatchLogger
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.MetricBatchLogger
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.Param
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.Param
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.ModelVersion
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.ModelVersion
instance GHC.Show.Show MLFlow.DataStructures.ModelVersionStatus
instance GHC.Read.Read MLFlow.DataStructures.ModelVersionStatus
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.MetricLogger
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.MetricLogger
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.Metric
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.Metric
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.FileInfo
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.FileInfo
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.Experiment
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.Experiment
instance GHC.Show.Show MLFlow.DataStructures.LifeCycleStage
instance GHC.Read.Read MLFlow.DataStructures.LifeCycleStage
instance Data.Aeson.Types.FromJSON.FromJSON MLFlow.DataStructures.Tag
instance Data.Aeson.Types.ToJSON.ToJSON MLFlow.DataStructures.Tag


-- | Haskell Bindings for MLFlow: <a>https://www.mlflow.org/</a>
module MLFlow
type TrackingURI = String " Base URL and Port to mlflow server"

-- | Hostname and port to TrackingURI
trackingURI :: String -> String -> TrackingURI

-- | Hostname and port (as Int) to TrackingURI
trackingURI' :: String -> Int -> TrackingURI
type ExperimentID = String " Experiment ID"

-- | Create an experiment with a name. Returns the ID of the newly created
--   experiment. Validates that another experiment with the same name does
--   not already exist and fails if another experiment with the same name
--   already exists.
createExperiment :: TrackingURI -> String -> IO ExperimentID

-- | Get a list of all experiments.
listExperiments :: TrackingURI -> IO [Experiment]

-- | Get metadata for an experiment. This method works on deleted
--   experiments.
getExperiment :: TrackingURI -> ExperimentID -> IO Experiment

-- | Get metadata for an experiment. (By Name)
getExperimentByName :: TrackingURI -> String -> IO Experiment

-- | Mark an experiment and associated metadata, runs, metrics, params, and
--   tags for deletion. If the experiment uses FileStore, artifacts
--   associated with experiment are also deleted.
deleteExperiment :: TrackingURI -> ExperimentID -> IO (Response ByteString)

-- | Restore an experiment marked for deletion. This also restores
--   associated metadata, runs, metrics, params, and tags. If experiment
--   uses FileStore, underlying artifacts associated with experiment are
--   also restored.
resoterExperiment :: TrackingURI -> ExperimentID -> IO (Response ByteString)

-- | Update experiment metadata.
updateExperiment :: TrackingURI -> ExperimentID -> String -> IO (Response ByteString)
type RunID = String " Run ID"

-- | Create a new run within an experiment. A run is usually a single
--   execution of a machine learning or data ETL pipeline. MLflow uses runs
--   to track Param, Metric, and RunTag associated with a single execution.
createRun :: TrackingURI -> ExperimentID -> [Tag] -> IO Run

-- | Mark a run for deletion.
deleteRun :: TrackingURI -> RunID -> IO (Response ByteString)

-- | Restore a deleted run.
restoreRun :: TrackingURI -> RunID -> IO (Response ByteString)

-- | Get metadata, metrics, params, and tags for a run. In the case where
--   multiple metrics with the same key are logged for a run, return only
--   the value with the latest timestamp. If there are multiple values with
--   the latest timestamp, return the maximum of these values.
getRun :: TrackingURI -> RunID -> IO Run

-- | Update run metadata.
updateRun :: TrackingURI -> RunID -> RunStatus -> Maybe Int -> IO RunInfo

-- | Log a metric for a run. A metric is a key-value pair (string key,
--   float value) with an associated timestamp. Examples include the
--   various metrics that represent ML model accuracy. A metric can be
--   logged multiple times.
logMetric :: TrackingURI -> RunID -> String -> Float -> Int -> IO (Response ByteString)

-- | Log a batch of metrics, params, and tags for a run. If any data failed
--   to be persisted, the server will respond with an error (non-200 status
--   code). In case of error (due to internal server error or an invalid
--   request), partial data may be written.
logBatch :: TrackingURI -> RunID -> [Metric] -> [Param] -> [Tag] -> IO (Response ByteString)

-- | Just for Convenience
logBatch' :: TrackingURI -> RunID -> Int -> Map String Float -> Map String String -> IO (Response ByteString)

-- | Log a param used for a run. A param is a key-value pair (string key,
--   string value). Examples include hyperparameters used for ML model
--   training and constant dates and values used in an ETL pipeline. A
--   param can be logged only once for a run.
logParam :: TrackingURI -> RunID -> String -> String -> IO (Response ByteString)

-- | Get a list of all values for the specified metric for a given run.
getMetricHistory :: TrackingURI -> RunID -> String -> IO [Metric]

-- | Set a tag on an experiment. Experiment tags are metadata that can be
--   updated.
setExperimentTag :: TrackingURI -> ExperimentID -> String -> String -> IO (Response ByteString)

-- | Set a tag on a run. Tags are run metadata that can be updated during a
--   run and after a run completes.
setRunTag :: TrackingURI -> RunID -> String -> String -> IO (Response ByteString)

-- | Delete a tag on a run. Tags are run metadata that can be updated
--   during a run and after a run completes.
deleteTag :: TrackingURI -> RunID -> String -> IO (Response ByteString)
